const ll SIZE = 100000;
ll prime[SIZE + 1];
bool vis[SIZE + 1];
ll fac[100][2];
ll primecnt = 0, faccnt = 0;
void Euler_prime(ll n)
{
    for (ll i = 2; i <= n; i++){
        if (!vis[i])
            prime[++primecnt] = i;
        for (ll j = 1; j <= primecnt && i * prime[j] <= n; j++){
            vis[i * prime[j]] = 1;
            if (i % prime[j] == 0)
                break;
        }
    }
}

void factor(ll x)
{
    for (ll i = 1; i <= primecnt && prime[i] * prime[i] <= x; i++){
        if (x % prime[i] == 0){
            fac[++faccnt][0] = prime[i];
            while (x % prime[i] == 0){
                fac[faccnt][1]++;
                x /= prime[i];
            }
        }
    }
    if (x != 1){
        fac[++faccnt][0] = x;
        fac[faccnt][1]++;
    }
}

ll qpow(ll a, ll b, ll mod)
{
    if (a == 0)
        return 0;
    ll res = 1;
    while (b > 0){
        if (b & 1)
            res = res * a % mod;
        b >>= 1;
        a = a * a % mod;
    }
    return res;
}

ll sum(ll p, ll k)
{
    if (k == 0)
        return 1;
    if (k % 2 == 0)
        return (p % mod * sum(p, k - 1) + 1) % mod;
    return (1 + qpow(p, k / 2 + 1, mod)) * sum(p, k / 2) % mod;
}

ll yueshuhe(ll a, ll b)
{
    factor(a);
    ll ans = 1;
    for (ll i = 1; i <= faccnt; i++){
        ans *= sum(fac[i][0], fac[i][1] * b);
        ans %= mod;
    }
    if (a == 0)
        return 0;
    else
        return (ans + mod) % mod;
}