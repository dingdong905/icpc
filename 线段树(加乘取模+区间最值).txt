const ll mod = 1000000007;
//pushup 和 evl 取模操作可删（不取模的时候把mod删掉）
//求区间最大最小改一下res+=就好了
const int SIZE = 1e6 + 7;
ll mod;
ll a[SIZE];
struct node{
    ll l, r, sum, add, mul;
}tr[SIZE * 4];

void pushup(ll u){
    //tr[u].sum = tr[u << 1].sum + tr[u << 1 | 1].sum;
    //tr[u].sum %= mod;
    tr[u].sum = max(tr[u << 1].sum, tr[u << 1 | 1].sum);//求最值  min max
}

void evl(node& root, ll add, ll mul){
    root.sum = (root.sum * mul + (root.r - root.l + 1) * add);
    //root.sum %= mod;
    root.mul = root.mul * mul;
    //root.mul %= mod;
    root.add = (root.add * mul + add);
    //root.add %= mod;
}

void pushdown(ll u){
    evl(tr[u << 1], tr[u].add, tr[u].mul);
    evl(tr[u << 1 | 1], tr[u].add, tr[u].mul);
    tr[u].add = 0, tr[u].mul = 1;
}
void build(ll u, ll l, ll r){
    if (l == r)
        tr[u].l = l, tr[u].r = r, tr[u].sum = a[r], tr[u].add = 0, tr[u].mul = 1;
    else{
        tr[u].l = l, tr[u].r = r, tr[u].sum = 0, tr[u].add = 0, tr[u].mul = 1;
        ll mid = (l + r) >> 1;
        build(u << 1, l, mid);
        build(u << 1 | 1, mid + 1, r);
        pushup(u);
    }
}

void modify(ll u, ll l, ll r, ll add, ll mul){
    if (tr[u].l >= l && tr[u].r <= r)
        evl(tr[u], add, mul);
    else{
        pushdown(u);
        ll mid = (tr[u].l + tr[u].r) >> 1;
        if (l <= mid)
            modify(u << 1, l, r, add, mul);
        if (r > mid)
            modify(u << 1 | 1, l, r, add, mul);
        pushup(u);
    }
}

void add(ll u, ll x, ll c){
    if (tr[u].l == x && tr[u].r == x)
        tr[u].l = x, tr[u].r = x, tr[u].sum = c, tr[u].add = 0, tr[u].mul = 1;
    else{
        pushdown(u);
        ll mid = (tr[u].l + tr[u].r) >> 1;
        if (x <= mid)
            add(u << 1, x, c);
        else
            add(u << 1 | 1, x, c);
        pushup(u);
    }
}
ll query(ll u, ll l, ll r){
    if (tr[u].l >= l && tr[u].r <= r)
        return tr[u].sum;
    pushdown(u);
    ll res = 0;
    ll mid = (tr[u].l + tr[u].r) >> 1;
    if (l <= mid){
        res = max(res, query(u << 1, l, r));
        //res += query(u << 1, l, r);
        //res %= mod;
    }
    if (r > mid){
        res = max(res, query(u << 1 | 1, l, r));
        //res += query(u << 1 | 1, l, r);
        //res %= mod;
    }
    return res;
}