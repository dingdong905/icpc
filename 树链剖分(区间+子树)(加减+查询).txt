const int MAXN = 200000 + 10;
int n;//mod 模 n 点数
//见题意 
int e, beg[MAXN], nex[MAXN], to[MAXN], wt[MAXN];
//链式前向星数组，w[]、wt[]初始点权数组 
int a[MAXN << 2], laz[MAXN << 2];
//线段树数组、lazy操作 
int son[MAXN], id[MAXN], fa[MAXN], cnt, dep[MAXN], siz[MAXN], top[MAXN];
//son[]重儿子编号,id[]新编号,fa[]父亲节点,cnt dfs_clock/dfs序,dep[]深度,siz[]子树大小,top[]当前链顶端节点 
int res = 0;
//查询答案 

inline void add(int x, int y)
{//链式前向星加边 
    to[++e] = y;
    nex[e] = beg[x];
    beg[x] = e;
}
//-------------------------------------- 以下为线段树 
inline void pushdown(int rt, int lenn)
{
    laz[rt << 1] += laz[rt];
    laz[rt << 1 | 1] += laz[rt];
    //a[rt << 1] %= mod;
    //a[rt << 1 | 1] %= mod;
    a[rt << 1] += laz[rt] * (lenn - (lenn >> 1));
    a[rt << 1 | 1] += laz[rt] * (lenn >> 1);
    //a[rt << 1] %= mod;
    //a[rt << 1 | 1] %= mod;
    laz[rt] = 0;
}

inline void build(int rt, int l, int r)
{
    if (l == r)
    {
        a[rt] = wt[l];
        /*
        if (a[rt] > mod)
        {
            a[rt] %= mod;
        }
        */
        return;
    }
    build(rt << 1, l, ((l + r) >> 1));
    build(rt << 1 | 1, ((l + r) >> 1) + 1, r);
    a[rt] = a[rt << 1] + a[rt << 1 | 1];
    //a[rt] %= mod;
}

inline void query(int rt, int l, int r, int L, int R)
{
    if (L <= l && r <= R)
    {
        res += a[rt];
        //res %= mod;
        return;
    }
    else
    {
        if (laz[rt])
        {
            pushdown(rt, (r - l + 1));
        }
        if (L <= ((l + r) >> 1))
        {
            query(rt << 1, l, ((l + r) >> 1), L, R);
        }
        if (R > ((l + r) >> 1))
        {
            query(rt << 1 | 1, ((l + r) >> 1) + 1, r, L, R);
        }
    }
}

inline void update(int rt, int l, int r, int L, int R, int k)
{
    if (L <= l && r <= R)
    {
        laz[rt] += k;
        //laz[rt] %= mod;
        a[rt] += k * (r - l + 1);
        //a[rt] %= mod;
    }
    else
    {
        if (laz[rt])
        {
            pushdown(rt, (r - l + 1));
        }
        if (L <= ((l + r) >> 1))
        {
            update(rt << 1, l, ((l + r) >> 1), L, R, k);
        }
        if (R > ((l + r) >> 1))
        {
            update(rt << 1 | 1, ((l + r) >> 1) + 1, r, L, R, k);
        }
        a[rt] = a[rt << 1] + a[rt << 1 | 1];
        //a[rt] %= mod;
    }
}
//---------------------------------以上为线段树 
inline int qRange(int x, int y)
{
    int ans = 0;
    while (top[x] != top[y])
    {//当两个点不在同一条链上 
        if (dep[top[x]] < dep[top[y]])
        {
            swap(x, y);//把x点改为所在链顶端的深度更深的那个点
        }
        res = 0;
        query(1, 1, n, id[top[x]], id[x]);//ans加上x点到x所在链顶端 这一段区间的点权和
        ans += res;
        //ans %= mod;//按题意取模 
        x = fa[top[x]];//把x跳到x所在链顶端的那个点的上面一个点
    }
    //直到两个点处于一条链上
    if (dep[x] > dep[y])
    {
        swap(x, y);//把x点深度更深的那个点
    }
    res = 0;
    query(1, 1, n, id[x], id[y]);//这时再加上此时两个点的区间和即可
    ans += res;
    return ans;
    //return ans % mod;
}

inline void updRange(int x, int y, int k)
{//同上 
    //k %= mod;
    while (top[x] != top[y])
    {
        if (dep[top[x]] < dep[top[y]])
        {
            swap(x, y);
        }
        update(1, 1, n, id[top[x]], id[x], k);
        x = fa[top[x]];
    }
    if (dep[x] > dep[y])
    {
        swap(x, y);
    }
    update(1, 1, n, id[x], id[y], k);
}

inline int qSon(int x)
{
    res = 0;
    query(1, 1, n, id[x], id[x] + siz[x] - 1);//子树区间右端点为id[x]+siz[x]-1 
    return res;
}

inline void updSon(int x, int k)
{//同上 
    update(1, 1, n, id[x], id[x] + siz[x] - 1, k);
}

inline void dfs1(int x, int f, int deep)
{//x当前节点，f父亲，deep深度 
    dep[x] = deep;//标记每个点的深度 
    fa[x] = f;//标记每个点的父亲 
    siz[x] = 1;//标记每个非叶子节点的子树大小 
    int maxson = -1;//记录重儿子的儿子数 
    for (int i = beg[x]; i; i = nex[i])
    {
        int y = to[i];
        if (y == f)
        {
            continue;//若为父亲则continue 
        }
        dfs1(y, x, deep + 1);//dfs其儿子 
        siz[x] += siz[y];//把它的儿子数加到它身上 
        if (siz[y] > maxson)
        {
            son[x] = y, maxson = siz[y];//标记每个非叶子节点的重儿子编号 
        }
    }
}

ll w[MAXN];//点权

inline void dfs2(int x, int topf)
{//x当前节点，topf当前链的最顶端的节点 
    id[x] = ++cnt;//标记每个点的新编号 
    wt[cnt] = w[x];//把每个点的初始值赋到新编号上来 
    top[x] = topf;//这个点所在链的顶端 
    if (!son[x])
    {
        return;//如果没有儿子则返回 
    }
    dfs2(son[x], topf);//按先处理重儿子，再处理轻儿子的顺序递归处理 
    for (int i = beg[x]; i; i = nex[i])
    {
        int y = to[i];
        if (y == fa[x] || y == son[x])
        {
            continue;
        }
        dfs2(y, y);//对于每一个轻儿子都有一条从它自己开始的链 
    }
}
void init() //多组输入初始化
{
    memset(beg, 0, sizeof(beg));
    memset(son, 0, sizeof(son));
    memset(laz, 0, sizeof(laz));
    e = 0,res = 0,cnt = 0;
}
int main()
{
    ll m, r;
    cin >> n >> m >> r >> mod;
    for (ll i = 1; i <= n; i++)
    {
        cin >> w[i];
    }
    for (ll i = 1; i < n; i++)
    {
        ll u, v;
        cin >> u >> v;
        add(u, v);
        add(v, u);
    }
    dfs1(r, 0, 1);
    dfs2(r, r);
    build(1, 1, n);
    for (ll i = 1; i <= m; i++)
    {
        ll opt;
        cin >> opt;
        if (opt == 1)
        {
            ll a, b, c;
            cin >> a >> b >> c;
            updRange(a, b, c);
        }
        else if (opt == 2)
        {
            ll x, y;
            cin >> x >> y;
            cout << qRange(x, y) << endl;
        }
        else if (opt == 3)
        {
            ll x, z;
            cin >> x >> z;
            updSon(x, z);
        }
        else
        {
            ll x;
            cin >> x;
            cout << qSon(x) << endl;
        }
    }
    return 0;
}