#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
const ll MAXN=305;   //矩阵的阶 
const ll mod=998244353; 
ll n;  //矩阵的大小
ll qpow(ll a, ll b, ll mod){
	ll res = 1;
	while (b){
		if (b & 1)
			res = res * a % mod;
		b >>= 1;
		a = a * a % mod;
	}
	return res % mod;
}

ll inv(ll x, ll mod){
	return qpow(x, mod - 2, mod);
}

struct Mat{
    ll m[305][305];
    void show(){
        //puts("----------------");
    	for(ll x=1;x<=n;x++){
    	    for(ll y=1;y<=n;y++)
    	       printf("%lld ",m[x][y]);
    	    puts("");
		}
	}
	//矩阵第x行和第y行交换
	void change1(ll x, ll y){
		for (ll i = 1; i <= n; i++)
			swap(m[x][i], m[y][i]);
	}
	//矩阵第x行乘以k
	void change2(ll x, ll k){
		for (ll i = 1; i <= n; i++)
			(((m[x][i] *= k) %= mod) += mod) %= mod;
	}
	//矩阵第x行加上第y行乘以k
	void change3(ll x, ll y, ll k){
		for (ll i = 1; i <= n; i++)
			(((m[x][i] += m[y][i] * k % mod) %= mod) += mod) %= mod;
	}
};//存储结构体

Mat Mul(Mat x, Mat y){  //矩阵乘法 
    Mat c;
    for (ll i = 1; i <= n; ++i) 
        for (ll j = 1; j <= n; ++j) 
            c.m[i][j] = 0;
    for (ll i = 1; i <= n; ++i) 
        for (ll j = 1; j <= n; ++j)
            for (ll k = 1; k <= n; ++k)
                c.m[i][j] = (c.m[i][j] % mod + x.m[i][k] * y.m[k][j] % mod) % mod;
    return c;
}
Mat Matpow(Mat x, ll y){  //矩阵快速幂
    Mat ans;
    for(ll i=1;i<=n;i++)
        ans.m[i][i]=1;
    while (y) { 
        if (y & 1)
            ans = Mul(ans, x);
        x = Mul(x, x);
        y >>= 1;
    }
    return ans;
}

Mat Matinv(Mat a){
	Mat b;
	for(ll i = 1; i <= n; i++)
	    for(ll j = 1;j <= n;j++){
	    	if(j==i)
		        b.m[i][i] = 1;
		    else
		        b.m[i][j] = 0;
	    }
	for (ll i = 1; i <= n; i++){
		if(a.m[i][i] == 0)
			for (ll j = i; j <= n; j++)
				if (a.m[j][i] != 0){
					b.change1(i, j);
					a.change1(i, j);
					break;
				}
		/*
		if (a.a[i][i] == 0)//矩阵不是满秩的
		{
			printf("No Solution\n");
			return 0;
		}
		*/
		b.change2(i, inv(a.m[i][i],mod));
		a.change2(i, inv(a.m[i][i],mod));
		for (ll j = i + 1; j <= n; j++){
			b.change3(j, i, -a.m[j][i]);
			a.change3(j, i, -a.m[j][i]);
		}
	}
	//把A消为单位矩阵 
	for (ll i = n - 1; i >= 1; i--)
		for (ll j = i+1; j <= n; j++){
			b.change3(i, j, -a.m[i][j]);
			a.change3(i, j, -a.m[i][j]);
		}
	return b;
}
ll p[305];
int main()
{
	ll T;
	scanf("%lld",&T);
	while(T--){
		scanf("%lld",&n);
		Mat now;
		for(ll i=1;i<=n;i++)
		    for(ll j=1;j<=n;j++)
		        scanf("%lld",&now.m[i][j]);
		for(ll i=1;i<=n;i++){
			ll ans=0;
			for(ll j=1;j<=n;j++)
			    ans+=now.m[i][j];
			for(ll j=1;j<=n;j++)
			    (now.m[i][j]*=inv(ans,mod))%=mod;
            p[i]=now.m[i][i];
		}
		Mat temp=now;
		for(ll i=1;i<=n;i++)
		    temp.m[i][i]=mod-1;
		Mat key=Matinv(temp);
		for(ll i=1;i<=n;i++){
		    for(ll j=1;j<=n;j++)
		        printf("%lld%c",(mod-key.m[i][j]*p[j]%mod)%mod,j==n?'\n':' ');
		    puts("");
		}
        //key.show();
	}
	return 0;
} 